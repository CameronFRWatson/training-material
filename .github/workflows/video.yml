name: Autogenerated and Deploy Videos

on:
  push:
    branches:
      - main

jobs:
  build-videos:
    if: github.repository_owner == 'galaxyproject'
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      mozillatts:
        image: synesthesiam/mozillatts
        ports:
          - 5002:5002
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # We get the previous build ID to know how many videos were changed since
      # then.
      #
      # We *could* fetch the diff in the past N days but if a build fails for
      # any reason, we'd lose those changes permanently and things would never
      # get built.
      #
      # So instead we just track the last successfully built git commit.
      - name: Previous build ID
        id: build_id
        run: |
          echo "::set-output name=commit::$(curl https://galaxy-training.s3.amazonaws.com/videos/topics/last-commit -f 2>/dev/null || echo none)"

      - name: Determine if we should build or exit early.
        id: delta
        run: |
            result=$(join <(find topics -name 'slides.html' -or -name introduction.html -or -name 'slides_ES.html' | xargs ./bin/filter-resource-metadata video | sort) <(git diff ${PREVIOUS_COMMIT_ID} --name-only | sort) | wc -l)
            echo "::set-output name=changedSlideCount::${result}"
        env:
          PREVIOUS_COMMIT_ID: ${{ steps.build_id.outputs.commit }}

      # BEGIN Dependencies
      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'
          architecture: 'x64'
        if: ${{ step.delta.outputs.changedSlideCount > 0 }}
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: "2.7"
        if: ${{ step.delta.outputs.changedSlideCount > 0 }}
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
        if: ${{ step.delta.outputs.changedSlideCount > 0 }}
      - uses: actions/cache@v2
        with:
          path: |
            vendor/bundle
            ~/.npm
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}-node-
            ${{ runner.os }}-gems-
        if: ${{ step.delta.outputs.changedSlideCount > 0 }}
      - name: Install dependencies
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
          npm install
          bundle pristine ffi

        if: ${{ step.delta.outputs.changedSlideCount > 0 }}
      # END Dependencies

      - name: Install rendering stuff
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb libfontconfig ffmpeg sox libsox-fmt-mp3 ghostscript
        if: ${{ step.delta.outputs.changedSlideCount > 0 }}

      - name: Change ImageMagick policy to allow pdf->png conversion.
        run: |
          sudo rm /etc/ImageMagick-6/policy.xml
        if: ${{ step.delta.outputs.changedSlideCount > 0 }}

      - name: Build Site
        run: |
          gem install bundler
          JEKYLL_ENV=production bundle exec jekyll build --strict_front_matter -d _site/training-material
        if: ${{ step.delta.outputs.changedSlideCount > 0 }}

      # The actual compilation process deposits everything in the ./videos/ folder.
      - name: Build Videos
        run: |
          sed -i "s|page.waitForNavigation({ waitUntil: 'load', timeout: 20000 });|page.waitForNavigation({ waitUntil: 'load', timeout: 60000 });|" $(npm bin)/decktape
          xvfb-run --auto-servernum --server-args="-screen 0 1920x1080x24" bundle exec bash bin/ari-make.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_POLLY_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_POLLY_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          PREVIOUS_COMMIT_ID: ${{ steps.build_id.outputs.commit }}
        if: ${{ step.delta.outputs.changedSlideCount > 0 }}

      # Deploy step, scary.
      - uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --acl public-read --follow-symlinks
        env:
          AWS_S3_BUCKET: galaxy-training
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE_DIR: './videos/topics/'
          DEST_DIR: 'videos/topics/'
        if: ${{ step.delta.outputs.changedSlideCount > 0 }}
